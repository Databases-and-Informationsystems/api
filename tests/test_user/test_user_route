import unittest
from unittest.mock import patch, MagicMock
from flask import Flask
from flask.testing import FlaskClient
from app.routes.auth_routes import ns
from app.services.user_service import user_service
from werkzeug.exceptions import BadRequest, NotFound


class TestAuthRoutes(unittest.TestCase):
    def setUp(self):
        self.app = Flask(__name__)
        self.client: FlaskClient = self.app.test_client()

        # Create a test namespace and add it to the app
        self.app.register_blueprint(ns)

    @patch("app.services.user_service.UserService.update_user_data")
    def test_update_profile_success(self, mock_update_user_data):
        # Arrange
        mock_update_user_data.return_value = {
            "id": 1,
            "username": "updated_username",
            "email": "updated_email@example.com",
        }
        headers = {"User-ID": "1"}
        payload = {
            "username": "updated_username",
            "email": "updated_email@example.com",
            "password": "new_password",
        }

        # Act
        response = self.client.put(
            "/auth/update-profile",
            json=payload,
            headers=headers,
        )

        # Assert
        self.assertEqual(response.status_code, 200)
        self.assertIn("Profile updated successfully", response.json["message"])

    @patch("app.services.user_service.UserService.update_user_data")
    def test_update_profile_missing_user_id(self, mock_update_user_data):
        # Arrange
        payload = {
            "username": "updated_username",
        }

        # Act
        response = self.client.put("/auth/update-profile", json=payload)

        # Assert
        self.assertEqual(response.status_code, 400)
        self.assertIn("User ID is required in headers.", response.json["message"])

    @patch("app.services.user_service.UserService.update_user_data")
    def test_update_profile_user_not_found(self, mock_update_user_data):
        # Arrange
        mock_update_user_data.side_effect = NotFound("User not found")
        headers = {"User-ID": "1"}
        payload = {
            "username": "updated_username",
        }

        # Act
        response = self.client.put(
            "/auth/update-profile",
            json=payload,
            headers=headers,
        )

        # Assert
        self.assertEqual(response.status_code, 404)
        self.assertIn("User not found", response.json["message"])


if __name__ == "__main__":
    unittest.main()
